#cloud-config

# Set timezone to Asia/Kolkata
timezone: Asia/Kolkata

# Update and upgrade the system
package_update: true
package_upgrade: true

# Install required packages
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release
  - containerd
  - software-properties-common

# Configure sysctl settings for Kubernetes
write_files:
  - path: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter
    permissions: "0644"

  - path: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-iptables = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward = 1
      net.ipv6.conf.all.forwarding = 1
    permissions: "0644"

  - path: /etc/containerd/config.toml
    content: |
      version = 2
      [plugins]
        [plugins."io.containerd.grpc.v1.cri"]
          [plugins."io.containerd.grpc.v1.cri".containerd]
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                runtime_type = "io.containerd.runc.v2"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                  SystemdCgroup = true
    permissions: "0644"

  - path: /etc/crictl.yaml
    content: |
      runtime-endpoint: unix:///run/containerd/containerd.sock
      image-endpoint: unix:///run/containerd/containerd.sock
      timeout: 10
      debug: false
    permissions: "0644"

  # Pre-create certificates from Terraform
  - path: /tmp/ca.crt
    encoding: base64
    content: ${ca_cert_pem}
    permissions: "0644"

  - path: /tmp/ca.key
    encoding: base64
    content: ${ca_key_pem}
    permissions: "0600"

  - path: /tmp/apiserver.key
    encoding: base64
    content: ${apiserver_key_pem}
    permissions: "0600"

  - path: /tmp/client.key
    encoding: base64
    content: ${client_key_pem}
    permissions: "0600"

  - path: /tmp/ssh_host_ed25519_key
    encoding: base64
    content: ${ssh_host_key_pem}
    permissions: "0600"

  - path: /tmp/ssh_host_ed25519_key.pub
    content: ${ssh_host_pubkey_pem}
    permissions: "0644"

  - path: /etc/kubernetes/kubeadm-config.yaml
    content: |
      apiVersion: kubeadm.k8s.io/v1beta4
      kind: InitConfiguration
      bootstrapTokens:
      - token: "${bootstrap_token}"
        description: "default bootstrap token"
        ttl: "24h"
      localAPIEndpoint:
        advertiseAddress: "MASTER_IPV4_ADDRESS"
        bindPort: 6443
      certificateKey: "${certificate_key}"
      nodeRegistration:
        criSocket: "unix:///run/containerd/containerd.sock"
        kubeletExtraArgs:
          - name: node-ip
            value: "MASTER_IPV4_ADDRESS"
        taints:
          - key: "node-role.kubernetes.io/control-plane"
            value: "true"
            effect: "PreferNoSchedule"
      ---
      apiVersion: kubeadm.k8s.io/v1beta4
      kind: ClusterConfiguration
      kubernetesVersion: v1.32.2
      apiServer:
        certSANs:
        - "MASTER_IPV4_ADDRESS"
        - "MASTER_IPV6_ADDRESS"
        extraArgs:
          - name: enable-bootstrap-token-auth
            value: "true"
          - name: bind-address
            value: 0.0.0.0
      controllerManager:
        extraArgs:
          - name: bind-address
            value: 0.0.0.0
          - name: cluster-signing-duration
            value: 87600h0m0s
      scheduler:
        extraArgs:
          - name: bind-address
            value: "0.0.0.0"
      etcd:
        local:
          extraArgs:
            - name: listen-metrics-urls
              value: "http://0.0.0.0:2381"
      networking:
        serviceSubnet: "10.96.0.0/12"
        podSubnet: "10.244.0.0/16"
      ---
      apiVersion: kubelet.config.k8s.io/v1beta1
      kind: KubeletConfiguration
      cgroupDriver: systemd
    permissions: "0644"

  - path: /usr/local/bin/init-kubernetes.sh
    content: |
      #!/bin/bash
      set -e

      # Load kernel modules
      modprobe overlay
      modprobe br_netfilter

      # Apply sysctl settings
      sysctl --system

      # Disable swap
      swapoff -a
      sed -i '/swap/d' /etc/fstab

      # Configure containerd
      mkdir -p /etc/containerd
      systemctl enable containerd
      systemctl restart containerd

      # Configure SSH host keys from Terraform
      mkdir -p /etc/ssh
      mv /tmp/ssh_host_ed25519_key /etc/ssh/
      mv /tmp/ssh_host_ed25519_key.pub /etc/ssh/
      chmod 600 /etc/ssh/ssh_host_ed25519_key
      chmod 644 /etc/ssh/ssh_host_ed25519_key.pub
      systemctl restart ssh

      # Wait for Tailscale to be ready
      echo "Waiting for Tailscale to be ready..."
      until tailscale status >/dev/null 2>&1; do
        sleep 5
      done

      # Get Tailscale IP addresses
      MASTER_IPV4=$(tailscale ip -4)
      MASTER_IPV6=$(tailscale ip -6)

      # Create directories for certificates
      mkdir -p /etc/kubernetes/pki

      # Move the pre-created certificates to the right locations
      mv /tmp/ca.crt /etc/kubernetes/pki/
      mv /tmp/ca.key /etc/kubernetes/pki/
      mv /tmp/apiserver.key /etc/kubernetes/pki/apiserver.key
      mv /tmp/client.key /etc/kubernetes/pki/client.key

      # Generate CSR configuration for API server certificate
      cat > /tmp/csr.conf << EOF
      [req]
      req_extensions = v3_req
      distinguished_name = req_distinguished_name
      prompt = no
      [req_distinguished_name]
      CN = kube-apiserver
      O = system:masters
      [ v3_req ]
      basicConstraints = CA:FALSE
      keyUsage = nonRepudiation, digitalSignature, keyEncipherment
      extendedKeyUsage = serverAuth, clientAuth
      subjectAltName = @alt_names
      [alt_names]
      DNS.1 = kubernetes
      DNS.2 = kubernetes.default
      DNS.3 = kubernetes.default.svc
      DNS.4 = kubernetes.default.svc.cluster
      DNS.5 = kubernetes.default.svc.cluster.local
      IP.1 = 10.96.0.1
      IP.2 = 127.0.0.1
      IP.3 = $MASTER_IPV4
      IP.4 = $MASTER_IPV6
      EOF

      # Generate CSR
      openssl req -new -key /etc/kubernetes/pki/apiserver.key \
        -out /tmp/apiserver.csr \
        -config /tmp/csr.conf

      # Sign the CSR with the CA
      openssl x509 -req \
        -in /tmp/apiserver.csr \
        -CA /etc/kubernetes/pki/ca.crt \
        -CAkey /etc/kubernetes/pki/ca.key \
        -CAcreateserial \
        -out /etc/kubernetes/pki/apiserver.crt \
        -days 3650 \
        -extensions v3_req \
        -extfile /tmp/csr.conf

      # Set proper permissions for certificates
      chmod 600 /etc/kubernetes/pki/ca.key
      chmod 644 /etc/kubernetes/pki/ca.crt
      chmod 600 /etc/kubernetes/pki/apiserver.key
      chmod 644 /etc/kubernetes/pki/apiserver.crt
      chmod 600 /etc/kubernetes/pki/client.key

      # Get kubernetes apt key
      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --no-tty --dearmor --batch -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

      # Add kubernetes repository
      echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

      # Install kubernetes components
      apt-get update
      apt-get install -y kubelet kubeadm kubectl
      apt-mark hold kubelet kubeadm kubectl

      # Replace placeholder with actual IP addresses in kubeadm config
      sed -i "s/MASTER_IPV4_ADDRESS/$MASTER_IPV4/g" /etc/kubernetes/kubeadm-config.yaml
      sed -i "s/MASTER_IPV6_ADDRESS/$MASTER_IPV6/g" /etc/kubernetes/kubeadm-config.yaml

      # Initialize kubernetes cluster
      kubeadm init --config=/etc/kubernetes/kubeadm-config.yaml --upload-certs

      # Configure kubectl for the root user
      mkdir -p /root/.kube
      cp -i /etc/kubernetes/admin.conf /root/.kube/config
      chown root:root /root/.kube/config

      # Create user account if doesn't exist and configure kubectl
      if id -u ubuntu >/dev/null 2>&1; then
        mkdir -p /home/ubuntu/.kube
        cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
        chown -R ubuntu:ubuntu /home/ubuntu/.kube
      fi

      # Configure TLS Bootstrapping
      cat > /etc/kubernetes/bootstrap-kubelet.conf << EOF
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority: /etc/kubernetes/pki/ca.crt
          server: https://$MASTER_IPV4:6443
        name: bootstrap
      contexts:
      - context:
          cluster: bootstrap
          user: kubelet-bootstrap
        name: bootstrap
      current-context: bootstrap
      kind: Config
      preferences: {}
      users:
      - name: kubelet-bootstrap
        user:
          token: ${bootstrap_token}
      EOF

      # Print success message
      echo "Kubernetes master node setup completed successfully!"
    permissions: "0755"

  - path: /etc/networkd-dispatcher/routable.d/50-tailscale
    content: |
      #!/bin/sh

      ethtool -K $(ip -o route get 8.8.8.8 | cut -f 5 -d " ") rx-udp-gro-forwarding on rx-gro-list off
    permissions: "0755"

# Run commands
runcmd:
  # Install Tailscale
  - ["sh", "-c", "curl -fsSL https://tailscale.com/install.sh | sh"]

  # Configure Tailscale
  - [
      "sh",
      "-c",
      "echo 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.d/99-tailscale.conf && echo 'net.ipv6.conf.all.forwarding = 1' | sudo tee -a /etc/sysctl.d/99-tailscale.conf && sudo sysctl -p /etc/sysctl.d/99-tailscale.conf",
    ]
  - ["/etc/networkd-dispatcher/routable.d/50-tailscale"]
  - [
      "tailscale",
      "up",
      "--auth-key=${tailscale_auth_key}",
      "--hostname=${hostname}",
      "--advertise-routes=10.244.0.0/16,10.96.0.0/12",
      "--accept-routes",
    ]
  - ["tailscale", "set", "--ssh"]
  - ["tailscale", "set", "--advertise-exit-node"]

  # Execute kubernetes initialization script
  - ["chmod", "+x", "/usr/local/bin/init-kubernetes.sh"]
  - ["/usr/local/bin/init-kubernetes.sh"]

# Final settings
power_state:
  delay: 1
  mode: reboot
  condition: true
